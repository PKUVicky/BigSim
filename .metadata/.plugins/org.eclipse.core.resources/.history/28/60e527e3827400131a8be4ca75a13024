package org.bigraph.bigSim.datamodel

import scala.util.parsing.combinator.RegexParsers

object Calculator extends RegexParsers {

  def number: Parser[Double] = """\d+(\.\d*)?""".r ^^ { _.toDouble }
  def variable: Parser[Double] = """[a-zA-Z]+([a-zA-Z]*)?""".r ^^ {
    DataModel.getValue(_)
  }
  def factor: Parser[Double] = variable | number | "(" ~> expr <~ ")"
  def term: Parser[Double] = factor ~ rep("*" ~ factor | "/" ~ factor) ^^ {
    case number ~ list => (number /: list) {
      case (x, "*" ~ y) => x * y
      case (x, "/" ~ y) => x / y
    }
  }
  def expr: Parser[Double] = term ~ rep("+" ~ term | "-" ~ term) ^^ {
    case number ~ list => list.foldLeft(number) { // same as before, using alternate name for /:
      case (x, "+" ~ y) => x + y
      case (x, "-" ~ y) => x - y
    }
  }

  def apply(input: String): Double = parseAll(expr, input) match {
    case Success(result, _) => result
    case failure: NoSuccess => scala.sys.error(failure.msg)
  }

  def main(args: Array[String]) {
    DataModel.parseData("MobileCloud/data/earthquake.txt")
    val exp = "(m.power+energy*15+(0.5*5))";
    println(apply(exp))
    println("time - 5".substring(4).replace(" ", "").trim().toDouble)
      
  }
}