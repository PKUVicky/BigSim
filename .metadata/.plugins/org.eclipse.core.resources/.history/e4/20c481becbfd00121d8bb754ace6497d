package org.bigraph.bigmc
import scala.collection.mutable.Set
import scala.collection.mutable.Map

object Matcher {

  def tryMatch(t: Term, r: Term, m: Match): Set[Match] = {
    /***
     * 
     */
    if(t.termType==TermType.TPREF && r.termType == TermType.)
    
    
    
    
    if (t.termType == TermType.TPREF && r.termType == TermType.TPREF) {
      var tempT = t.asInstanceOf[Prefix]
      var tempR = r.asInstanceOf[Prefix]
      tryMatchPrefixPrefix(tempT, tempR, m)
    } else if (t.termType == TermType.TPAR && r.termType == TermType.TPREF) {
      var tempT = t.asInstanceOf[Paraller]
      var tempR = r.asInstanceOf[Prefix]
      tryMatchParallerPrefix(tempT, tempR, m)
    } else if (t.termType == TermType.TPREF && r.termType == TermType.TPAR) {
      var tempT = t.asInstanceOf[Prefix]
      var tempR = r.asInstanceOf[Paraller]
      tryMatchPrefixParaller(tempT, tempR, m)
    } else if (t.termType == TermType.TPAR && r.termType == TermType.TPAR) {
      var tempT = t.asInstanceOf[Paraller]
      var tempR = r.asInstanceOf[Paraller]
      tryMatchParallerPareller(tempT, tempR, m)
    } else if (t.termType == TermType.TNUM && r.termType == TermType.TNUM) {
      var tempT = t.asInstanceOf[Num]
      var tempR = r.asInstanceOf[Num]
      tryMatchNumNum(tempT, tempR, m)
    } else if (r.termType == TermType.TREGION) {
      var tempR = r.asInstanceOf[Regions]
      tryMatchTermRegions(t, tempR, m)
    } else if (r.termType == TermType.THOLE) {
      var tempR = r.asInstanceOf[Hole]
      tryMatchTermHole(t, tempR, m)
    } else if (t.termType == TermType.TNIL && r.termType == TermType.TNIL) {
      var tempT = t.asInstanceOf[Nil]
      var tempR = r.asInstanceOf[Nil]
      tryMatchNilTerm(tempT, tempR, m)
    } else {
      m.failure
    }
  }

  // t matches r if the value of t equals the value of r
  //比较两个Num类型的话，就是比较值，相同则返回包含传入match的Set，否则返回空Set
  //这个在原来版本中没有，应该是qq加上的。
  def tryMatchNumNum(t: Num, r: Num, m: Match): Set[Match] = {
    if (t.value == r.value) {
      if (m.root == null) {
        m.root = t
      }
      m.success
      Match.singleton(m);
    } else {
      m.failure
    }
  }

  // Term always matches Hole
  def tryMatchTermHole(t: Term, r: Hole, m: Match): Set[Match] = {
    m.success
    m.addParam(r.index, t)
    Match.singleton(m)
  }

  def tryMatchPrefixPrefix(t: Prefix, r: Prefix, m: Match): Set[Match] = {
    if (BigMCOpts.DEBUG) {
      println("matcher::tryMatchPrefixPrefix " + "matching prefix: " + t.toString() + " against redex: " + r.toString())
    }
    assert(m != null)
    
    // compare the controls of t1 and t2, return failure if t1's control does not equal with ts'2
    if (t.ctrl == r.ctrl) {
      if (BigMCOpts.DEBUG) {
        println("matcher::tryMatch " + "Prefix match: " + t.toString() + " with " + r.toString() + " Active: " + t.activeContext)
      }
      if (m.root == null && !(t.parent == null || (t.parent != null && t.parent.activeContext))) {
        return m.failure
      } else if (m.root == null) {
        m.root = t
      }

      m.addMatch(r, t)

      var tnm: List[Name] = t.port
      var rnm: List[Name] = r.port
      //外层的t.ctrl == r.ctrl 首先比较control是否相同，然后，tnm取得里面的name的值
      //首先判断，如果里面包含的name个数相同再继续比较，否则的话就不同了。
      if (tnm.size != rnm.size) {
        if (BigMCOpts.DEBUG) {
          println("matcher: tnm: " + tnm.size + " rnm: " + rnm.size)
        }
        return m.failure
      }

      if (BigMCOpts.DEBUG) {
        println("MATCHER LINK START")
      }

      for (i <- 0 until tnm.size) {
        if (BigMCOpts.DEBUG) {
          println("MATCH: " + i + ": of term: " + t.toString() + ". " + m.toString())
        }
        // Comments by zhaoxin: check the names. check if the ports names are the same
        if (!Bigraph.isFree(rnm(i))) {
          if (BigMCOpts.DEBUG) {
            println("matcher: !free: " + Bigraph.nameToString(rnm(i)))
          }

          if (tnm(i) != rnm(i)) {
            if (BigMCOpts.DEBUG) {
              println("MATCH FAILED: expected: " + Bigraph.nameToString(rnm(i)) + " got " + Bigraph.nameToString(tnm(i)))
            }
            return m.failure
          }

          m.captureName(rnm(i), tnm(i))

          if (BigMCOpts.DEBUG) {
            println("matcher: !free: captured " + rnm(i))
          }
        } else {
          // This is a symbolic link name, not a literal one
          // We need to look it up in the existing mappings
          // If it exists, tnm[i] must match what it previously matched
          // If not, we bind this name to tnm[i]
          if (BigMCOpts.DEBUG) {
            println("matcher: free: " + rnm(i) + " match object: " + m.toString())
          }

          var nmap: Map[Name, Name] = m.getNames

          if (!nmap.contains(rnm(i))) {
            m.captureName(rnm(i), tnm(i))
            if (BigMCOpts.DEBUG) {
              println("matcher: free: new " + Bigraph.nameToString(rnm(i)) + " = " + Bigraph.nameToString(tnm(i)))
            }
          } else {
            if (BigMCOpts.DEBUG) {
              println("matcher: free: old " + rnm(i))
            }
            if (nmap(rnm(i)) != tnm(i)) {
              return m.failure
            }
            if (BigMCOpts.DEBUG) {
              println("matcher: free: old matched " + rnm(i))
            }
          }
        }
      }
      return tryMatch(t.suffix, r.suffix, m)
    } else {
      return m.failure
    }
  }

  // Paraller doesn't match Prefix
  def tryMatchParallerPrefix(t: Paraller, r: Prefix, m: Match): Set[Match] = {
    if (BigMCOpts.DEBUG) {
      println("matcher::tryMatchParallerPrefix " + "matching par: " + t.toString() + " against pref redex: " + r.toString())
    }
    m.failure
  }

  def tryMatchTermReactionRule(t: Term, r: ReactionRule): Set[Match] = {
    var matches: Set[Match] = Set()

    if (r.redex.termType == TermType.TREGION) {
      var tempMatch = new Match(r)
      return tryMatch(t, r.redex, tempMatch)
    }

    var p: Term = t.next
    while (p != null) {
      if (p.parent == null || p.parent.activeContext) {
        var nm: Match = new Match(r)
        matches = Match.merge(matches, tryMatch(p, r.redex, nm));
      }
      p = t.next
    }
    t.reset
    matches
  }

  def tryMatchTermRegions(t: Term, r: Regions, m: Match): Set[Match] = {
    if (BigMCOpts.DEBUG) {
      println("matcher::tryMatchTermRegions " + "matching region: " + t.toString() + " against redex: " + r.toString())
    }
    if (m.root != null || t.parent != null) {
      return m.failure
    }
    
    // r->get_children() put each element of T||T into list ch.
    var ch: List[Term] = r.getChildren
    m.root = t;
    m.addMatch(r, t)
    var wm: Match = new WideMatch(m.rule)
    var tempWM: Set[Match] = Match.singleton(wm)
    return regionMatch(t, ch, tempWM)
  }

  def regionMatch(t: Term, redexes: List[Term], m: Set[Match]): Set[Match] = {
    if (BigMCOpts.DEBUG) {
      println("Enter into Matcher::regionMatch")
    }

    if (redexes.size == 0) {
      for (ele <- m.toList) {
        ele.success
      }
      return m
    }

    var redex = redexes.head
    var tempRedexes = redexes.drop(1)
    var result: Set[Match] = Set()
    for (element <- m.toList) {
      // For each existing wide match, we get a new set of matches:
      if (element.rule.name == "proceedGate") {
    	   //println("redex ####:" + redex);
    	   //println("element.rule:" + element.rule);
    	   //println("element###:" + element);
      }
      // bug fix, 当反应规则根区域中含nil时，跳过nil的匹配
      if (redex.termType != TermType.TNIL) {
    	  var ms: Set[Match] = tryMatchAnywhere(t, redex, element.rule, element)
    	  if (ms.size == 0) {
    	    element.failure
    	  }
      	var cp: Set[Match] = crossprod(Match.singleton(element), ms)
        result ++= cp
      } else {
        var nilNode : Nil = new Nil();
       
        result.add(element)
      }
    }
    return regionMatch(t, tempRedexes, result)
  }

  def tryMatchPrefixParaller(t: Prefix, r: Paraller, m: Match): Set[Match] = {
    // This covers cases like redex: a.(b | $0) matching against a.b where $0 = nil
    var ch: Set[Term] = r.getChildren
    if (ch.size > 2) {
      return m.failure
    }

    var hasHole: Hole = null
    var nonHole: Term = null

    for (ite <- ch.toList) {
      if (ite.termType == TermType.THOLE) {
        if (hasHole != null) {
          return m.failure
        }
        hasHole = ite.asInstanceOf[Hole]
      } else {
        if (hasHole != null) {
          return m.failure
        }
        nonHole = ite
      }
    }
    if (nonHole == null || hasHole == null) {
      return m.failure
    }
    m.addParam(hasHole.index, new Nil())
    return tryMatch(t, nonHole, m)
  }
  
  // if the type of r is TNIL, return match, otherwise return doesn't match
  def tryMatchNilTerm(t: Nil, r: Term, m: Match): Set[Match] = {
    if (BigMCOpts.DEBUG) {
      println("Enter into Matcher::tryMatchNilTerm")
    }
    if (r.termType == TermType.TNIL) {
      m.addMatch(r, t)
      m.success
      Match.singleton(m)
    } else if (r.termType == TermType.THOLE) {
      m.success
      var tempR = r.asInstanceOf[Hole]
      m.addParam(tempR.index, t)
      Match.singleton(m)
    } else {
      m.failure
    }
  }

  def tryMatchAnywhere(t: Term, r: Term, rl: ReactionRule, m: Match): Set[Match] = {
    if (BigMCOpts.DEBUG) {
      println("matcher::tryMatchAnywhere: " + m.toString())
    }

    var matches: Set[Match] = Set()
    var p: Term = t.next

    while (p != null) {
      if (BigMCOpts.DEBUG) {
        println("p: " + p.toString() + ": ")
      }
      if (p.parent == null || p.parent.activeContext) {
        if (BigMCOpts.DEBUG) {
          println("active")
        }
        var nm: Match = new Match(rl)
        nm.incorporate(m)
        if (m.parent != null) {
          nm.incorporate(m.parent);
        }
        matches = Match.merge(matches, tryMatch(p, r, nm))
      } else {
        if (BigMCOpts.DEBUG)
          println("passive")
      }

      p = t.next
    }
    t.reset
    return matches
  }

  def isCompat(m1: Match, m2: Match): Boolean = {
    if (m2.hasFailed) {
      return false
    }

    var m1n: Map[Name, Name] = m1.getNames
    var m2n: Map[Name, Name] = m2.getNames
    for ((key, value) <- m1n) {
      if (m2n.contains(key) && m2n(key) != value) {
        return false
      }
    }
    
    var mapping = m1.mapping
    for ((key, value) <- mapping) {
      if (m2.getMapping(key) != null && m2.getMapping(key) != value) {
        return false
      }
    }
    return true
  }

  def noOverlap(prev: List[Match], cand: Match): Boolean = {
    for (ite <- prev) {
      if (ite.root.overlap(cand.root) || cand.root.overlap(ite.root)) {
        return false
      }
    }
    return true
  }

  def crossprod(m1: Set[Match], m2: Set[Match]): Set[Match] = {
    // We have two sets {a,b,c} and {d,e,f}:
    // We want to construct:
    // {a.incorporate(d), a.incorporate(e), a.incorporate(f), b.inc...}
    if (BigMCOpts.DEBUG) {
      println("crossprod(): " + m1.size + " with " + m2.size)
    }

    var res: Set[Match] = Set()

    for (item1 <- m1.toList) {
      for (item2 <- m2.toList) {
        var item1Sbumatches = noOverlap(item1.asInstanceOf[WideMatch].submatches, item2)
        if (item1Sbumatches) {
          var nm: WideMatch = item1.asInstanceOf[WideMatch].clone
          nm.addSubMatch(item2)
          res.add(nm)
        }
      }
    }
    m1.clear()
    m2.clear()
    if (BigMCOpts.DEBUG) {
      println("crossprod(): res: " + res.size)
    }
    return res
  }
  
  def getSubsOfParaller(children : Set[Term]) : Set[Term] = {
    var result = Set[Term]()
    var inner = Set[Term]()
    for(child <- children){
      if(child.termType != TermType.TPAR){
        result += child
      } else {
        inner = getSubsOfParaller(child.asInstanceOf[Paraller].getChildren)
        result ++= inner
      }
    }
    result
  }
  

  def tryMatchParallerPareller(t: Paraller, r: Paraller, m: Match): Set[Match] = {
    if (BigMCOpts.DEBUG) {
      println("matcher::tryMatchParallerPareller " + "matching: " + t.toString() + " against redex: " + r.toString())
    }
    
    // Term.getChildren is modified the same as C++
    var tch = t.getChildren//getSubsOfParaller(t.getChildren)
    var rch = r.getChildren//getSubsOfParaller(r.getChildren)
    
    var matches = Map[Term, Set[Match]]()
    // Is there a top level hole?  e.g. A | B | $0
    // Something like A.$0 | B | C does not count.
    // This will be the hole term itself, or NULL.
    var hasHole: Hole = null
    var isBreak = false
    
    for (ite <- rch.toList; if isBreak != true) {
      if (ite.termType == TermType.THOLE) {
        hasHole = ite.asInstanceOf[Hole]
        rch -= ite
        isBreak = true
      }
    }

    if (hasHole == null && rch.size > tch.size) {
      return m.failure
    }

    if (m.root == null && !(t.parent == null || (t.parent != null && t.parent.activeContext))) {
      return m.failure // We can't start a new match here.
    } else if (m.root == null) {
      m.root = t // We can start a new match here!
    }

    m.addMatch(r, t)

    for (iteR <- rch.toList) {
      var mcount = 0
      for (iteT <- tch.toList) {
        if (BigMCOpts.DEBUG) {
          println("Matching: " + iteR.toString() + " against " + iteT.toString())
        }
        var mn: Match = m.clone()
        var crossmatch: Set[Match] = tryMatch(iteT, iteR, mn)
        if (crossmatch.size > 0) {
          mcount += 1;
          if(matches.contains(iteR)){
            matches(iteR) ++= crossmatch  
          } else {
        	matches(iteR) = crossmatch
          }
          if (BigMCOpts.DEBUG) {
            println(": matches " + crossmatch.size + " times")
          }
        } else {
          if (BigMCOpts.DEBUG) {
            println(": no match")
          }
        }
      }
      // We found nothing matching this part of the redex, so fail now.
      if (mcount == 0) {
        return m.failure
      }
    }

    if (BigMCOpts.DEBUG) {
      println("PARALLEL MATCH:")
      for ((key, value) <- matches) {
        println("REDEX PART: " + key.toString())
        println("MATCH SET: ")
        for (ite <- value.toList) {
          println(ite.toString())
        }
      }
    }

    var cand: Set[Match] = Set()
    for (ite <- rch.toList) {
      if (cand.size == 0) {
        if (ite != rch.toList.head) {
          return m.failure
        }
//        cand = matches(ite)
        matches(ite).map(x =>
          cand.add(x)
          )
      } else {
        var ns: Set[Match] = matches(ite)
        var newcand: Set[Match] = Set()
        for (iteJ <- cand.toList) {
          for (iteK <- ns.toList) {
            if (isCompat(iteJ, iteK)) {
              var mm: Match = iteJ.clone()
              mm.root = m.root
              mm.incorporate(iteK)
              newcand += mm
            }
          }
        }
        cand = newcand
      }
    }

    if (cand.size == 0) {
      return m.failure
    }

    // OK, now we have to go through and populate the parameter
    // with everything that was not matched.
    if (hasHole != null || t.parent == null) {
      if (t.parent == null && hasHole == null) {
        hasHole = new Hole(999999);
      }
      for (iteI <- cand.toList) {
        var ctx: Set[Term] = Set()
        for (iteJ <- tch.toList) {
          if (iteI.getMapping(iteJ) == null) {
            ctx += iteJ
          }
        }
        if (ctx.size == 0) {
          iteI.addParam(hasHole.index, new Nil())
        } else if (ctx.size == 1) {
          iteI.addParam(hasHole.index, ctx.head)
        } else {
          //iteI.addParam(hasHole.index, new Paraller(ctx.head, ctx.tail.head))
          iteI.addParam(hasHole.index, Paraller.constuctParaller(ctx))
        }
      }
    }

    if (BigMCOpts.DEBUG) {
      println("PARALLEL MATCH: RESULT:")
      for (ite <- cand.toList) {
        println(ite.toString())
      }
    }
    return cand
  }
}

object testMatcher {
  def main(args: Array[String]) {
    println("--------------------Test crossprod function:--------------- ")
    var redexTest = TermParser.apply("P[lf,p,rf] || F[lf]");
    var reactumTest = TermParser.apply("P[lf,p,rf].F[lf] || Q[lf]");
    var ruleA: ReactionRule = new ReactionRule(redexTest, reactumTest)
    var matchA = new Match(ruleA)
    var matchB = new Match(ruleA)
    var matchC = new WideMatch(ruleA)

    var nameA1: Name = new Name("nameA1")
    var nameA2: Name = new Name("nameA2")
    var nameA3: Name = new Name("nameA3")
    var nameA4: Name = new Name("nameA4")

    var nameB1: Name = new Name("nameB1")
    var nameB2: Name = new Name("nameB2")
    var nameB3: Name = new Name("nameB3")
    var nameB4: Name = new Name("nameB4")

    matchA.captureName(nameA1, nameA2)
    matchA.captureName(nameA3, nameA4)

    matchB.captureName(nameB1, nameB2)
    matchB.captureName(nameB3, nameB4)

    println("The value of matchA is: " + matchA.toString())
    println("The value of matchB is: " + matchB.toString())

    var matchTestSet: Set[Match] = Set(matchA, matchB)
    println("The set is: " + matchTestSet.toString())

    var crossResultSet = Matcher.crossprod(Match.singleton(matchC), matchTestSet)

    println("The crossResultSet is: " + crossResultSet.toString())

    var resListBuffer = new scala.collection.mutable.ListBuffer[Match]()
    resListBuffer += matchA
    println("The resListBuffer is: " + resListBuffer.toString())
    var set2Convert = scala.collection.mutable.Set(resListBuffer: _*)
    println("The set to set2Convert is: " + set2Convert.toString())
  }
}
